diff --git a/common/src/config.rs b/common/src/config.rs
index f9930dc..d370b5e 100644
--- a/common/src/config.rs
+++ b/common/src/config.rs
@@ -14,7 +14,7 @@ pub const MAX_INPUT_LEN: usize = 100000;
 pub const SAVING_WHOLE: bool = false;
 pub const USE_CODECACHE: bool = true;
 pub const SAMPLING: bool = true;
-pub const RUNAFL: bool = true;
+pub const RUNAFL: bool = false;
 pub const QSYM_FILTER: bool = true;
 
 
diff --git a/fuzzer/cpp_core/filter.cc b/fuzzer/cpp_core/filter.cc
index e74cc8f..1944f15 100644
--- a/fuzzer/cpp_core/filter.cc
+++ b/fuzzer/cpp_core/filter.cc
@@ -110,8 +110,8 @@ extern "C" {
     memset(virgin_map_, 0, kMapSize);
     prev_loc_ = 0;
     //for ce testing
-    //memset(trace_map_, 0, kMapSize);
-    //.memset(context_map_, 0, kMapSize);
+    memset(trace_map_, 0, kMapSize);
+    memset(context_map_, 0, kMapSize);
     visited_.clear();
   }
 
diff --git a/fuzzer/src/file.rs b/fuzzer/src/file.rs
index 5ebcfb3..4a92021 100644
--- a/fuzzer/src/file.rs
+++ b/fuzzer/src/file.rs
@@ -7,7 +7,7 @@ use std::time;
 use std::thread;
 
 pub fn get_file_name(dir: &Path, id: usize) -> PathBuf {
-    let file_name = format!("id:{:06}", id);
+    let file_name = format!("id:{:08}", id);
     dir.join(file_name)
 }
 
diff --git a/fuzzer/src/fuzz_loop.rs b/fuzzer/src/fuzz_loop.rs
index c7eb960..9af6559 100644
--- a/fuzzer/src/fuzz_loop.rs
+++ b/fuzzer/src/fuzz_loop.rs
@@ -184,7 +184,11 @@ pub fn grading_loop(
         predicate = sol.predicate;
         fid = sol.fid;
         let mut_buf = mutate(buf, &sol.sol, sol.field_index, sol.field_size);
-        let new_path = executor.run_sync_with_cond(&mut_buf, bid, sctx, order);
+        //let new_path = executor.run_sync_with_cond(&mut_buf, bid, sctx, order);
+        let new_path = (false,0);
+        executor.run_norun(&mut_buf);
+        
+        continue;
 
         let direction_out = executor.get_cond();
         if (direction_out == 0 && direction == 1) || (direction_out == 1 && direction == 0) {
@@ -304,6 +308,7 @@ pub fn fuzz_loop(
     restart: bool,
     forklock: Arc<Mutex<u32>>,
     bq: BlockingQueue<Solution>,
+    num_seeds: usize,
     ) {
 
   let mut id: u32 = 0;
@@ -340,7 +345,8 @@ pub fn fuzz_loop(
   let branch_hitcount = Arc::new(RwLock::new(HashMap::<(u64,u64,u32,u64), u32>::new()));
 
   while running.load(Ordering::Relaxed) {
-    if (id as usize) < depot.get_num_inputs() {
+    //if (id as usize) < depot.get_num_inputs() {
+    if (id as usize) < num_seeds {
 
 
       let t_start = time::Instant::now();
@@ -361,7 +367,9 @@ pub fn fuzz_loop(
         }
 
         //      constraint_solver(shmid, read_end);
-        info!("Done solving {}", id);
+        let used_t1 = t_start.elapsed();
+        let used_us1 = (used_t1.as_secs() as u32 * 1000_000) + used_t1.subsec_nanos() / 1_000;
+        info!("Done solving {} time {}", id, used_us1);
         close(read_end).map_err(|err| debug!("close read end {:?}", err)).ok();
 
         //let timeout = time::Duration::from_secs(90);
@@ -379,9 +387,6 @@ pub fn fuzz_loop(
 
 
 
-        let used_t1 = t_start.elapsed();
-        let used_us1 = (used_t1.as_secs() as u32 * 1000_000) + used_t1.subsec_nanos() / 1_000;
-        trace!("track time {}", used_us1);
         id = id + 1;
         let mut progress = Vec::new();
         progress.write_u32::<LittleEndian>(id).unwrap();
diff --git a/fuzzer/src/fuzz_main.rs b/fuzzer/src/fuzz_main.rs
index acaa733..a061769 100644
--- a/fuzzer/src/fuzz_main.rs
+++ b/fuzzer/src/fuzz_main.rs
@@ -33,6 +33,7 @@ pub fn fuzz_main(
     mem_limit: u64,
     time_limit: u64,
     sync_afl: bool,
+    num_seeds: usize,
     ) {
   pretty_env_logger::init();
 
@@ -105,7 +106,7 @@ pub fn fuzz_main(
     let fk = forklock.clone();
     let bqc = bq.clone();
     let handle = thread::spawn(move || {
-        fuzz_loop::fuzz_loop(r, cmd, d, b, bg, blist, restart, fk, bqc);
+        fuzz_loop::fuzz_loop(r, cmd, d, b, bg, blist, restart, fk, bqc, num_seeds);
         });
     handlers.push(handle);
   }
@@ -120,7 +121,7 @@ pub fn fuzz_main(
     let fk = forklock.clone();
     let bqc = bq.clone();
     let handle = thread::spawn(move || {
-        fuzz_loop::fuzz_loop(r, cmd, d, b, bg, blist, restart, fk, bqc);
+        fuzz_loop::fuzz_loop(r, cmd, d, b, bg, blist, restart, fk, bqc, num_seeds);
         });
     handlers.push(handle);
   } 
diff --git a/fuzzer/src/main.rs b/fuzzer/src/main.rs
index 5fb44f9..9d7b616 100644
--- a/fuzzer/src/main.rs
+++ b/fuzzer/src/main.rs
@@ -55,6 +55,12 @@ fn main() {
              .value_name("JOB")
              .help("Sets the number of thread jobs, default is 1")
              .takes_value(true))
+        .arg(Arg::with_name("num_seeds")
+             .short("s")
+             .long("num_seeds")
+             .value_name("SEEDS")
+             .help("Sets the number of seeds for CE testing")
+             .takes_value(true))
         .arg(Arg::with_name("grader_jobs")
              .short("g")
              .long("graders")
@@ -77,6 +83,7 @@ fn main() {
         value_t!(matches, "memory_limit", u64).unwrap_or(fastgen_common::config::MEM_LIMIT),
         value_t!(matches, "time_limit", u64).unwrap_or(fastgen_common::config::TIME_LIMIT),
         matches.occurrences_of("sync_afl") > 0,
+        value_t!(matches, "num_seeds", usize).unwrap_or(0),
     );
 
 }
diff --git a/fuzzer/src/z3solver.rs b/fuzzer/src/z3solver.rs
index 868726a..b63d502 100644
--- a/fuzzer/src/z3solver.rs
+++ b/fuzzer/src/z3solver.rs
@@ -769,7 +769,8 @@ pub fn solve(shmid: i32, pipefd: RawFd, solution_queue: BlockingQueue<Solution>,
       }
 
       if msg.msgtype == 0 {
-        if localcnt > 64 { continue; }
+        //if localcnt > 64 { continue; }
+        //let try_solve = true;
         let try_solve = if config::QSYM_FILTER { unsafe { qsym_filter(msg.addr, msg.result == 1) } }
         else { hitcount <= 5 && (!flipped) && localcnt <= 16 };
         let rawsol = solve_cond(msg.label, msg.result, try_solve, &table, &ctx, &solver, &mut uf, &mut branch_deps, &fmemcmp_data);
diff --git a/llvm_mode/dfsan_rt/dfsan/done_abilist.txt b/llvm_mode/dfsan_rt/dfsan/done_abilist.txt
index 756ada0..cf75fb4 100644
--- a/llvm_mode/dfsan_rt/dfsan/done_abilist.txt
+++ b/llvm_mode/dfsan_rt/dfsan/done_abilist.txt
@@ -492,3 +492,32 @@ fun:__grade_*=discard
 #fun:LLVMFuzzerTestOneInput=uninstrumented
 fun:__afl_manual_init=uninstrumented
 fun:__afl_manual_init=discard
+fun:cgc_pow=uninstrumented
+fun:cgc_pow=discard
+fun:cgc_remainder=uninstrumented
+fun:cgc_remainder=discard
+fun:cgc_log10=uninstrumented
+fun:cgc_log10=discard
+fun:cgc_floor=uninstrumented
+fun:cgc_floor=discard
+fun:cgc_rint=uninstrumented
+fun:cgc_rint=discard
+fun:cgc_sin=uninstrumented
+fun:cgc_sin=discard
+fun:cgc_cos=uninstrumented
+fun:cgc_cos=discard
+fun:cgc_log2=uninstrumented
+fun:cgc_log2=discard
+fun:cgc_atan2=uninstrumented
+fun:cgc_atan2=discard
+fun:cgc_sqrt=uninstrumented
+fun:cgc_sqrt=discard
+fun:cgc_log=uninstrumented
+fun:cgc_log=discard
+fun:cgc_fabs=discard
+fun:cgc_fabs=uninstrumented
+fun:cgc_tan=uninstrumented
+fun:cgc_tan=discard
+fun:cgc_logf=uninstrumented
+fun:cgc_logf=discard
+
